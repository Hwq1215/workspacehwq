{
	// Place your vscodes 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"begin":{
		"prefix": "cpp_begin",
		"body": [
			"#include<bits/stdc++.h>",
			"using namespace std;",
			"",
			"int main(){",
			"",
			"system(\"pause\");",
		    "return 0;",
			"}",
		],
		"description": "cpp算法初始模板"
	},
	"BTree":{
		"prefix": "BTree",
		"body": [
			"struct TreeNode {",
		  		"\tint val;",
			    "\tTreeNode *left;",
			    "\tTreeNode *right;",
			    "\tTreeNode() : val(0), left(nullptr), right(nullptr) {}",
			    "\tTreeNode(int x) : val(x), left(nullptr), right(nullptr) {}",
		   		"\tTreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}",
				"\t};",
		],
		"description": "the Binary Tree",
	},
	"split()":{
		"prefix": "split()",
		"body": [
			"std::vector<std::string> split(std::string str, std::string pattern)",
			"{",
    			"\tstd::string::size_type pos;",
    			"\tstd::vector<std::string> result;",
    			"\tstr += pattern;",
    			"\tint size = str.size();",
    			"\tfor (int i = 0; i < size; i++)",
    			"\t{",
        		"\tpos = str.find(pattern, i);",
        		"\tif (pos < size)",
        		"\t{",
            	"\tstd::string s = str.substr(i, pos - i);",
            	"\tresult.push_back(s);",
            	"\ti = pos + pattern.size() - 1;",
        		"\t}",
    		"}",
    			"return result;",
			"}",
		]
	},
	"change_string_to_int":{
		"prefix": "change_string_to_int()",
		"body": ["int change_string_int(string s){",
				"\tconst char *str = s.c_str();",
				"\tatoi(str);",
				"\t}",
				"};",]
	},
	
}